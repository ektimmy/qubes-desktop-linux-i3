diff --git a/include/config_directives.h b/include/config_directives.h
index f910d59..37e0057 100644
--- a/include/config_directives.h
+++ b/include/config_directives.h
@@ -71,7 +71,7 @@ CFGFUN(ipc_kill_timeout, const long timeout_ms);
 CFGFUN(tiling_drag, const char *value);
 CFGFUN(restart_state, const char *path);
 CFGFUN(popup_during_fullscreen, const char *value);
-CFGFUN(color, const char *colorclass, const char *border, const char *background, const char *text, const char *indicator, const char *child_border);
+CFGFUN(color, const char *colorclass, const char *labelqube, const char *border, const char *background, const char *text, const char *indicator, const char *child_border);
 CFGFUN(color_single, const char *colorclass, const char *color);
 CFGFUN(floating_modifier, const char *modifiers);
 CFGFUN(default_border, const char *windowtype, const char *border, const long width);
diff --git a/include/configuration.h b/include/configuration.h
index 19d2f71..55fa2b6 100644
--- a/include/configuration.h
+++ b/include/configuration.h
@@ -244,7 +244,7 @@ struct Config {
         struct Colortriple urgent;
         struct Colortriple placeholder;
         bool got_focused_tab_title;
-    } client;
+    } client[QUBE_NUM_LABELS];
     struct config_bar {
         struct Colortriple focused;
         struct Colortriple unfocused;
diff --git a/include/data.h b/include/data.h
index 483aeca..e572dcb 100644
--- a/include/data.h
+++ b/include/data.h
@@ -176,6 +176,24 @@ typedef enum {
     FOCUS_WRAPPING_WORKSPACE = 3
 } focus_wrapping_t;
 
+/**
+ * Qubes colors
+ */
+typedef enum {
+    QUBE_DOM0 = 0,
+    QUBE_RED = 1,
+    QUBE_ORANGE = 2,
+    QUBE_YELLOW = 3,
+    QUBE_GREEN = 4,
+    QUBE_GRAY = 5,
+    QUBE_BLUE = 6,
+    QUBE_PURPLE = 7,
+    QUBE_BLACK = 8,
+} qube_label_t;
+
+#define QUBE_NUM_LABELS 9
+
+
 /**
  * Stores a rectangle, for example the size of a window, the child window etc.
  *
@@ -444,6 +462,12 @@ struct Window {
     /** The name of the window. */
     i3String *name;
 
+    /** The name of the qubes vm. */
+    i3String *qubes_vmname;
+
+    /** The qubes label. */
+    int qubes_label;
+
     /** The WM_WINDOW_ROLE of this window (for example, the pidgin buddy window
      * sets "buddy list"). Useful to match specific windows in assignments or
      * for_window. */
diff --git a/include/i3-atoms_rest.xmacro.h b/include/i3-atoms_rest.xmacro.h
index fa915fd..cd6f801 100644
--- a/include/i3-atoms_rest.xmacro.h
+++ b/include/i3-atoms_rest.xmacro.h
@@ -22,4 +22,6 @@ xmacro(_NET_REQUEST_FRAME_EXTENTS) \
 xmacro(_NET_FRAME_EXTENTS) \
 xmacro(_MOTIF_WM_HINTS) \
 xmacro(WM_CHANGE_STATE) \
+xmacro(_QUBES_VMNAME) \
+xmacro(_QUBES_LABEL) \
 xmacro(MANAGER)
diff --git a/include/window.h b/include/window.h
index 7b43ab1..39be137 100644
--- a/include/window.h
+++ b/include/window.h
@@ -40,6 +40,21 @@ void window_update_name(i3Window *win, xcb_get_property_reply_t *prop);
  */
 void window_update_name_legacy(i3Window *win, xcb_get_property_reply_t *prop);
 
+/**
+ * Updates the qubes vmname by using _QUBES_VMNAME (encoded in UTF-8) for the given
+ * window.
+ *
+ */
+void window_update_qubes_vmname(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt);
+
+/**
+ * Updates the qubes label by using _QUBES_LABEL (encoded in UTF-8) for the given
+ * window.
+ *
+ */
+void window_update_qubes_label(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt);
+
+
 /**
  * Updates the CLIENT_LEADER (logical parent window).
  *
diff --git a/parser-specs/config.spec b/parser-specs/config.spec
index 33708b5..980b68e 100644
--- a/parser-specs/config.spec
+++ b/parser-specs/config.spec
@@ -61,7 +61,7 @@ state INITIAL:
   colorclass = 'client.background'
       -> COLOR_SINGLE
   colorclass = 'client.focused_inactive', 'client.focused_tab_title', 'client.focused', 'client.unfocused', 'client.urgent', 'client.placeholder'
-      -> COLOR_BORDER
+      -> COLOR_QUBE
 
 # We ignore comments and 'set' lines (variables).
 state IGNORE_LINE:
@@ -387,6 +387,10 @@ state COLOR_SINGLE:
       -> call cfg_color_single($colorclass, $color)
 
 # colorclass border background text indicator
+state COLOR_QUBE:
+  qubelabel = word
+      -> COLOR_BORDER
+
 state COLOR_BORDER:
   border = word
       -> COLOR_BACKGROUND
@@ -403,13 +407,13 @@ state COLOR_INDICATOR:
   indicator = word
       -> COLOR_CHILD_BORDER
   end
-      -> call cfg_color($colorclass, $border, $background, $text, NULL, NULL)
+      -> call cfg_color($colorclass, $qubelabel, $border, $background, $text, NULL, NULL)
 
 state COLOR_CHILD_BORDER:
   child_border = word
-      -> call cfg_color($colorclass, $border, $background, $text, $indicator, $child_border)
+      -> call cfg_color($colorclass, $qubelabel, $border, $background, $text, $indicator, $child_border)
   end
-      -> call cfg_color($colorclass, $border, $background, $text, $indicator, NULL)
+      -> call cfg_color($colorclass, $qubelabel, $border, $background, $text, $indicator, NULL)
 
 # <exec|exec_always> [--no-startup-id] command
 state EXEC:
diff --git a/src/commands.c b/src/commands.c
index 009e98b..9be24ee 100644
--- a/src/commands.c
+++ b/src/commands.c
@@ -700,7 +700,7 @@ void cmd_resize_set(I3_CMD, long cwidth, const char *mode_width, long cheight, c
     ysuccess(success);
 }
 
-static int border_width_from_style(border_style_t border_style, long border_width, Con *con) {
+static int border_width_from_style_orig(border_style_t border_style, long border_width, Con *con) {
     if (border_style == BS_NONE) {
         return 0;
     }
@@ -720,6 +720,11 @@ static int border_width_from_style(border_style_t border_style, long border_widt
     }
 }
 
+static int border_width_from_style(border_style_t border_style, long border_width, Con *con) {
+    int original = border_width_from_style_orig(border_style, border_width, con);
+    return (original < 3 && border_style != BS_NONE) ? 3 : original;
+}
+
 /*
  * Implementation of 'border normal|pixel [<n>]', 'border none|1pixel|toggle'.
  *
diff --git a/src/config.c b/src/config.c
index bf3ec6d..bee569f 100644
--- a/src/config.c
+++ b/src/config.c
@@ -193,15 +193,99 @@ bool load_configuration(const char *override_configpath, config_load_t load_type
         x.child_border = draw_util_hex_to_color(cbackground);  \
     } while (0)
 
-    config.client.background = draw_util_hex_to_color("#000000");
-    INIT_COLOR(config.client.focused, "#4c7899", "#285577", "#ffffff", "#2e9ef4");
-    INIT_COLOR(config.client.focused_inactive, "#333333", "#5f676a", "#ffffff", "#484e50");
-    INIT_COLOR(config.client.unfocused, "#333333", "#222222", "#888888", "#292d2e");
-    INIT_COLOR(config.client.urgent, "#2f343a", "#900000", "#ffffff", "#900000");
-    config.client.got_focused_tab_title = false;
+//    config.client.got_focused_tab_title = false;
+    config.client[QUBE_DOM0].background = draw_util_hex_to_color("#c4c4c4");
+    INIT_COLOR(config.client[QUBE_DOM0].focused,
+        "#f7f7f7", "#f5f5f5", "#000000", "#0a0a0a");
+    INIT_COLOR(config.client[QUBE_DOM0].focused_inactive,
+        "#f7f7f7", "#dcdcdc", "#191919", "#232323");
+    INIT_COLOR(config.client[QUBE_DOM0].unfocused,
+        "#f7f7f7", "#c4c4c4", "#323232", "#3b3b3b");
+    INIT_COLOR(config.client[QUBE_DOM0].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
+
+    config.client[QUBE_RED].background = draw_util_hex_to_color("#841b1b");
+    INIT_COLOR(config.client[QUBE_RED].focused,
+        "#d06767", "#bd2727", "#ffffff", "#27bdbd");
+    INIT_COLOR(config.client[QUBE_RED].focused_inactive,
+        "#d06767", "#971f1f", "#e5e5e5", "#1f9797");
+    INIT_COLOR(config.client[QUBE_RED].unfocused,
+        "#d06767", "#841b1b", "#cccccc", "#1b8484");
+    INIT_COLOR(config.client[QUBE_RED].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
+
+    config.client[QUBE_ORANGE].background = draw_util_hex_to_color("#a16e1b");
+    INIT_COLOR(config.client[QUBE_ORANGE].focused,
+        "#eebb67", "#e79e27", "#000000", "#2770e7");
+    INIT_COLOR(config.client[QUBE_ORANGE].focused_inactive,
+        "#eebb67", "#b87e1f", "#191919", "#1f59b8");
+    INIT_COLOR(config.client[QUBE_ORANGE].unfocused,
+        "#eebb67", "#a16e1b", "#323232", "#1b4ea1");
+    INIT_COLOR(config.client[QUBE_ORANGE].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
+
+    config.client[QUBE_YELLOW].background = draw_util_hex_to_color("#a1a023");
+    INIT_COLOR(config.client[QUBE_YELLOW].focused,
+        "#eeec6f", "#e7e532", "#000000", "#3234e7");
+    INIT_COLOR(config.client[QUBE_YELLOW].focused_inactive,
+        "#eeec6f", "#b8b728", "#191919", "#2829b8");
+    INIT_COLOR(config.client[QUBE_YELLOW].unfocused,
+        "#eeec6f", "#a1a023", "#323232", "#2324a1");
+    INIT_COLOR(config.client[QUBE_YELLOW].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
+
+    config.client[QUBE_GREEN].background = draw_util_hex_to_color("#3e972c");
+    INIT_COLOR(config.client[QUBE_GREEN].focused,
+        "#8be379", "#5ad840", "#000000", "#be40d8");
+    INIT_COLOR(config.client[QUBE_GREEN].focused_inactive,
+        "#8be379", "#48ac33", "#191919", "#9833ac");
+    INIT_COLOR(config.client[QUBE_GREEN].unfocused,
+        "#8be379", "#3e972c", "#323232", "#852c97");
+    INIT_COLOR(config.client[QUBE_GREEN].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
+
+    config.client[QUBE_GRAY].background = draw_util_hex_to_color("#636368");
+    INIT_COLOR(config.client[QUBE_GRAY].focused,
+        "#afafb4", "#8e8e95", "#ffffff", "#95958e");
+    INIT_COLOR(config.client[QUBE_GRAY].focused_inactive,
+        "#afafb4", "#717177", "#e5e5e5", "#777771");
+    INIT_COLOR(config.client[QUBE_GRAY].unfocused,
+        "#afafb4", "#636368", "#cccccc", "#686863");
+    INIT_COLOR(config.client[QUBE_GRAY].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
+
+    config.client[QUBE_BLUE].background = draw_util_hex_to_color("#275197");
+    INIT_COLOR(config.client[QUBE_BLUE].focused,
+        "#739de3", "#3874d8", "#ffffff", "#d89c38");
+    INIT_COLOR(config.client[QUBE_BLUE].focused_inactive,
+        "#739de3", "#2c5cac", "#e5e5e5", "#ac7c2c");
+    INIT_COLOR(config.client[QUBE_BLUE].unfocused,
+        "#739de3", "#275197", "#cccccc", "#976d27");
+    INIT_COLOR(config.client[QUBE_BLUE].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
+
+    config.client[QUBE_PURPLE].background = draw_util_hex_to_color("#6f276f");
+    INIT_COLOR(config.client[QUBE_PURPLE].focused,
+        "#bb73bb", "#9f389f", "#ffffff", "#389f38");
+    INIT_COLOR(config.client[QUBE_PURPLE].focused_inactive,
+        "#bb73bb", "#7f2c7f", "#e5e5e5", "#2c7f2c");
+    INIT_COLOR(config.client[QUBE_PURPLE].unfocused,
+        "#bb73bb", "#6f276f", "#cccccc", "#276f27");
+    INIT_COLOR(config.client[QUBE_PURPLE].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
+
+    config.client[QUBE_BLACK].background = draw_util_hex_to_color("#141414");
+    INIT_COLOR(config.client[QUBE_BLACK].focused,
+        "#5b5b5b", "#333333", "#ffffff", "#cccccc");
+    INIT_COLOR(config.client[QUBE_BLACK].focused_inactive,
+        "#5b5b5b", "#1e1e1e", "#e5e5e5", "#e1e1e1");
+    INIT_COLOR(config.client[QUBE_BLACK].unfocused,
+        "#5b5b5b", "#141414", "#cccccc", "#ebebeb");
+    INIT_COLOR(config.client[QUBE_BLACK].urgent,
+        "#bd2727", "#e79e27", "#333333", "#27bdbd");
 
     /* border and indicator color are ignored for placeholder contents */
-    INIT_COLOR(config.client.placeholder, "#000000", "#0c0c0c", "#ffffff", "#000000");
+    INIT_COLOR(config.client[QUBE_DOM0].placeholder,"#000000", "#0c0c0c", "#ffffff", "#000000");
 
     /* the last argument (indicator color) is ignored for bar colors */
     INIT_COLOR(config.bar.focused, "#4c7899", "#285577", "#ffffff", "#000000");
@@ -282,6 +366,12 @@ bool load_configuration(const char *override_configpath, config_load_t load_type
         set_font(&config.font);
     }
 
+    /* redefine defaults, to overwrite user settings easily */
+    config.default_border = BS_NORMAL;
+    config.default_floating_border = BS_NORMAL;
+    config.default_border_width = logical_px(2);
+    config.default_floating_border_width = logical_px(2);
+
     /* Make bar config blocks without a configured font use the i3-wide font. */
     Barconfig *current;
     if (load_type != C_VALIDATE) {
diff --git a/src/config_directives.c b/src/config_directives.c
index 81adf35..c9002a3 100644
--- a/src/config_directives.c
+++ b/src/config_directives.c
@@ -562,40 +562,65 @@ CFGFUN(popup_during_fullscreen, const char *value) {
 
 CFGFUN(color_single, const char *colorclass, const char *color) {
     /* used for client.background only currently */
-    config.client.background = draw_util_hex_to_color(color);
+    config.client[QUBE_DOM0].background = draw_util_hex_to_color(color);
 }
 
-CFGFUN(color, const char *colorclass, const char *border, const char *background, const char *text, const char *indicator, const char *child_border) {
-#define APPLY_COLORS(classname)                                                                              \
+CFGFUN(color, const char *colorclass, const char *qubelabel, const char *border, const char *background, const char *text, const char *indicator, const char *child_border) {
+#define APPLY_COLORS(classname, label)                                                                              \
     do {                                                                                                     \
         if (strcmp(colorclass, "client." #classname) == 0) {                                                 \
             if (strcmp("focused_tab_title", #classname) == 0) {                                              \
-                config.client.got_focused_tab_title = true;                                                  \
+                config.client[label].got_focused_tab_title = true;                                                  \
                 if (indicator || child_border) {                                                             \
                     ELOG("indicator and child_border colors have no effect for client.focused_tab_title\n"); \
                 }                                                                                            \
             }                                                                                                \
-            config.client.classname.border = draw_util_hex_to_color(border);                                 \
-            config.client.classname.background = draw_util_hex_to_color(background);                         \
-            config.client.classname.text = draw_util_hex_to_color(text);                                     \
+            config.client[label].classname.border = draw_util_hex_to_color(border);                                 \
+            config.client[label].classname.background = draw_util_hex_to_color(background);                         \
+            config.client[label].classname.text = draw_util_hex_to_color(text);                                     \
             if (indicator != NULL) {                                                                         \
-                config.client.classname.indicator = draw_util_hex_to_color(indicator);                       \
+                config.client[label].classname.indicator = draw_util_hex_to_color(indicator);                       \
             }                                                                                                \
             if (child_border != NULL) {                                                                      \
-                config.client.classname.child_border = draw_util_hex_to_color(child_border);                 \
+                config.client[label].classname.child_border = draw_util_hex_to_color(child_border);                 \
             } else {                                                                                         \
-                config.client.classname.child_border = config.client.classname.background;                   \
+                config.client[label].classname.child_border = config.client[label].classname.background;                   \
             }                                                                                                \
             return;                                                                                          \
         }                                                                                                    \
     } while (0)
 
-    APPLY_COLORS(focused_inactive);
-    APPLY_COLORS(focused_tab_title);
-    APPLY_COLORS(focused);
-    APPLY_COLORS(unfocused);
-    APPLY_COLORS(urgent);
-    APPLY_COLORS(placeholder);
+    int valid_color = 1;
+    qube_label_t label = QUBE_DOM0;
+    if (strcmp(qubelabel, "dom0") == 0) {
+        label = QUBE_DOM0;
+    } else if (strcmp(qubelabel, "red") == 0) {
+        label = QUBE_RED;
+    } else if (strcmp(qubelabel, "orange") == 0) {
+        label = QUBE_ORANGE;
+    } else if (strcmp(qubelabel, "yellow") == 0) {
+        label = QUBE_YELLOW;
+    } else if (strcmp(qubelabel, "green") == 0) {
+        label = QUBE_GREEN;
+    } else if (strcmp(qubelabel, "gray") == 0) {
+        label = QUBE_GRAY;
+    } else if (strcmp(qubelabel, "blue") == 0) {
+        label = QUBE_BLUE;
+    } else if (strcmp(qubelabel, "purple") == 0) {
+        label = QUBE_PURPLE;
+    } else if (strcmp(qubelabel, "black") == 0) {
+        label = QUBE_BLACK;
+    } else {
+        valid_color = 0;
+    }
+
+    if (valid_color) {
+        APPLY_COLORS(focused_inactive, label);
+        APPLY_COLORS(focused, label);
+        APPLY_COLORS(unfocused, label);
+        APPLY_COLORS(urgent, label);
+    }
+
 
 #undef APPLY_COLORS
 }
diff --git a/src/manage.c b/src/manage.c
index aeef703..9b8dcda 100644
--- a/src/manage.c
+++ b/src/manage.c
@@ -113,7 +113,7 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
     xcb_get_window_attributes_reply_t *attr = NULL;
 
     xcb_get_property_cookie_t wm_type_cookie, strut_cookie, state_cookie,
-        utf8_title_cookie, title_cookie,
+        utf8_title_cookie, title_cookie, qubes_vmname_cookie, qubes_label_cookie,
         class_cookie, leader_cookie, transient_cookie,
         role_cookie, startup_id_cookie, wm_hints_cookie,
         wm_normal_hints_cookie, motif_wm_hints_cookie, wm_user_time_cookie, wm_desktop_cookie,
@@ -181,6 +181,8 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
     strut_cookie = GET_PROPERTY(A__NET_WM_STRUT_PARTIAL, UINT32_MAX);
     state_cookie = GET_PROPERTY(A__NET_WM_STATE, UINT32_MAX);
     utf8_title_cookie = GET_PROPERTY(A__NET_WM_NAME, 128);
+    qubes_vmname_cookie = GET_PROPERTY(A__QUBES_VMNAME, 128);
+    qubes_label_cookie = GET_PROPERTY(A__QUBES_LABEL, UINT32_MAX);
     leader_cookie = GET_PROPERTY(A_WM_CLIENT_LEADER, UINT32_MAX);
     transient_cookie = GET_PROPERTY(XCB_ATOM_WM_TRANSIENT_FOR, UINT32_MAX);
     title_cookie = GET_PROPERTY(XCB_ATOM_WM_NAME, 128);
@@ -208,6 +210,8 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
     window_update_name_legacy(cwindow, xcb_get_property_reply(conn, title_cookie, NULL));
     window_update_name(cwindow, xcb_get_property_reply(conn, utf8_title_cookie, NULL));
     window_update_icon(cwindow, xcb_get_property_reply(conn, wm_icon_cookie, NULL));
+    window_update_qubes_vmname(cwindow, xcb_get_property_reply(conn, qubes_vmname_cookie, NULL), true);
+    window_update_qubes_label(cwindow, xcb_get_property_reply(conn, qubes_label_cookie, NULL), true);
     window_update_leader(cwindow, xcb_get_property_reply(conn, leader_cookie, NULL));
     window_update_transient_for(cwindow, xcb_get_property_reply(conn, transient_cookie, NULL));
     window_update_strut_partial(cwindow, xcb_get_property_reply(conn, strut_cookie, NULL));
diff --git a/src/match.c b/src/match.c
index cfd7d32..01aaf93 100644
--- a/src/match.c
+++ b/src/match.c
@@ -48,6 +48,7 @@ bool match_is_empty(Match *match) {
             match->window_role == NULL &&
             match->workspace == NULL &&
             match->machine == NULL &&
+            match->vmname == NULL &&
             match->urgent == U_DONTCHECK &&
             match->id == XCB_NONE &&
             match->window_type == UINT32_MAX &&
@@ -81,6 +82,7 @@ void match_copy(Match *dest, Match *src) {
     DUPLICATE_REGEX(window_role);
     DUPLICATE_REGEX(workspace);
     DUPLICATE_REGEX(machine);
+    DUPLICATE_REGEX(vmname);
 }
 
 /*
@@ -123,6 +125,7 @@ bool match_matches_window(Match *match, i3Window *window) {
     }
 
     CHECK_WINDOW_FIELD(title, name, i3string);
+    CHECK_WINDOW_FIELD(vmname, qubes_vmname, i3string);
     CHECK_WINDOW_FIELD(window_role, role, str);
 
     if (match->window_type != UINT32_MAX) {
@@ -283,6 +286,7 @@ void match_free(Match *match) {
     regex_free(match->window_role);
     regex_free(match->workspace);
     regex_free(match->machine);
+    regex_free(match->vmname);
 }
 
 /*
@@ -304,7 +308,7 @@ void match_parse_property(Match *match, const char *ctype, const char *cvalue) {
         match->instance = regex_new(cvalue);
         return;
     }
-
+    
     if (strcmp(ctype, "window_role") == 0) {
         regex_free(match->window_role);
         match->window_role = regex_new(cvalue);
@@ -406,6 +410,12 @@ void match_parse_property(Match *match, const char *ctype, const char *cvalue) {
         return;
     }
 
+    if (strcmp(ctype, "vmname") == 0) {
+        regex_free(match->vmname);
+        match->vmname = regex_new(cvalue);
+        return;
+    }
+
     if (strcmp(ctype, "tiling") == 0) {
         match->window_mode = WM_TILING;
         return;
diff --git a/src/resize.c b/src/resize.c
index 3b90f3a..3ab7fdd 100644
--- a/src/resize.c
+++ b/src/resize.c
@@ -227,7 +227,7 @@ void resize_graphical_handler(Con *first, Con *second, orientation_t orientation
     }
 
     mask = XCB_CW_BACK_PIXEL;
-    values[0] = config.client.focused.border.colorpixel;
+    values[0] = config.client[QUBE_DOM0].focused.border.colorpixel;
 
     mask |= XCB_CW_OVERRIDE_REDIRECT;
     values[1] = 1;
diff --git a/src/restore_layout.c b/src/restore_layout.c
index 6f35d16..1a9e50c 100644
--- a/src/restore_layout.c
+++ b/src/restore_layout.c
@@ -128,8 +128,8 @@ void restore_connect(void) {
 }
 
 static void update_placeholder_contents(placeholder_state *state) {
-    const color_t foreground = config.client.placeholder.text;
-    const color_t background = config.client.placeholder.background;
+    const color_t foreground = config.client[QUBE_DOM0].placeholder.text;
+    const color_t background = config.client[QUBE_DOM0].placeholder.background;
 
     draw_util_clear_surface(&(state->surface), background);
 
@@ -197,7 +197,7 @@ static void open_placeholder_window(Con *con) {
             true,
             XCB_CW_BACK_PIXEL | XCB_CW_EVENT_MASK,
             (uint32_t[]){
-                config.client.placeholder.background.colorpixel,
+                config.client[QUBE_DOM0].placeholder.background.colorpixel,
                 XCB_EVENT_MASK_EXPOSURE | XCB_EVENT_MASK_STRUCTURE_NOTIFY,
             });
         /* Make i3 not focus this window. */
diff --git a/src/tiling_drag.c b/src/tiling_drag.c
index e4babe3..8fa5ef1 100644
--- a/src/tiling_drag.c
+++ b/src/tiling_drag.c
@@ -273,7 +273,7 @@ static xcb_window_t create_drop_indicator(Rect rect) {
     uint32_t values[2];
 
     mask = XCB_CW_BACK_PIXEL;
-    values[0] = config.client.focused.indicator.colorpixel;
+    values[0] = config.client[QUBE_DOM0].focused.indicator.colorpixel;
 
     mask |= XCB_CW_OVERRIDE_REDIRECT;
     values[1] = 1;
diff --git a/src/window.c b/src/window.c
index 7abe995..04e1dad 100644
--- a/src/window.c
+++ b/src/window.c
@@ -135,6 +135,63 @@ void window_update_name_legacy(i3Window *win, xcb_get_property_reply_t *prop) {
     free(prop);
 }
 
+/*
+ * Updates the qubes vmname by using _QUBES_VMNAME (encoded in UTF-8) for the given
+ * window.
+ *
+ */
+void window_update_qubes_vmname(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt) {
+    if (prop == NULL || xcb_get_property_value_length(prop) == 0) {
+        win->qubes_vmname = i3string_from_utf8("dom0");
+        FREE(prop);
+        return;
+    }
+
+    i3string_free(win->qubes_vmname);
+
+    /* Truncate the name at the first zero byte. See i3 #3515. */
+    const int len = xcb_get_property_value_length(prop);
+    char *qubes_vmname = sstrndup(xcb_get_property_value(prop), len);
+    win->qubes_vmname = i3string_from_utf8(qubes_vmname);
+    free(qubes_vmname);
+
+    LOG("_QUBES_VMNAME set to \"%s\"\n", i3string_as_utf8(win->qubes_vmname));
+
+    if (before_mgmt) {
+        free(prop);
+        return;
+    }
+
+    run_assignments(win);
+
+    free(prop);
+}
+
+/*
+ * Updates the qubes label by using _QUBES_LABEL (encoded in UTF-8) for the given
+ * window.
+ *
+ */
+void window_update_qubes_label(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt) {
+    if (prop == NULL || xcb_get_property_value_length(prop) == 0) {
+        win->qubes_label = 0;
+        FREE(prop);
+        return;
+    }
+
+    win->qubes_label = *(int*) xcb_get_property_value(prop);
+
+    if (before_mgmt) {
+        free(prop);
+        return;
+    }
+
+    run_assignments(win);
+
+    free(prop);
+}
+
+
 /*
  * Updates the CLIENT_LEADER (logical parent window).
  *
diff --git a/src/x.c b/src/x.c
index 48105b0..288c311 100644
--- a/src/x.c
+++ b/src/x.c
@@ -487,20 +487,31 @@ void x_draw_decoration(Con *con) {
     /* 1: build deco_params and compare with cache */
     struct deco_render_params *p = scalloc(1, sizeof(struct deco_render_params));
 
+    /* Find out which Qubes label to use */
+    qube_label_t label = QUBE_DOM0;
+    struct Window *win = con->window;
+    if (win != NULL) {
+        DLOG("con->qubes_label is %d\n", win->qubes_label);
+        if (win->qubes_label >= 0 && win->qubes_label < QUBE_NUM_LABELS) {
+            label = win->qubes_label;
+        }
+    }
+
+
     /* find out which colors to use */
     if (con->urgent) {
-        p->color = &config.client.urgent;
+        p->color = &config.client[label].urgent;
     } else if (con == focused || con_inside_focused(con)) {
-        p->color = &config.client.focused;
+        p->color = &config.client[label].focused;
     } else if (con == TAILQ_FIRST(&(parent->focus_head))) {
-        if (config.client.got_focused_tab_title && !leaf && con_descend_focused(con) == focused) {
+        if (config.client[label].got_focused_tab_title && !leaf && con_descend_focused(con) == focused) {
             /* Stacked/tabbed parent of focused container */
-            p->color = &config.client.focused_tab_title;
+            p->color = &config.client[label].focused_tab_title;
         } else {
-            p->color = &config.client.focused_inactive;
+            p->color = &config.client[label].focused_inactive;
         }
     } else {
-        p->color = &config.client.unfocused;
+        p->color = &config.client[label].unfocused;
     }
 
     p->border_style = con_border_style(con);
@@ -510,7 +521,7 @@ void x_draw_decoration(Con *con) {
     p->con_rect = (struct width_height){r->width, r->height};
     p->con_window_rect = (struct width_height){w->width, w->height};
     p->con_deco_rect = con->deco_rect;
-    p->background = config.client.background;
+    p->background = config.client[QUBE_DOM0].background;
     p->con_is_leaf = con_is_leaf(con);
     p->parent_layout = con->parent->layout;
 
@@ -545,16 +556,16 @@ void x_draw_decoration(Con *con) {
         draw_util_clear_surface(&(con->frame_buffer), (color_t){.red = 0.0, .green = 0.0, .blue = 0.0});
 
         /* top area */
-        draw_util_rectangle(&(con->frame_buffer), config.client.background,
+        draw_util_rectangle(&(con->frame_buffer), config.client[QUBE_DOM0].background,
                             0, 0, r->width, w->y);
         /* bottom area */
-        draw_util_rectangle(&(con->frame_buffer), config.client.background,
+        draw_util_rectangle(&(con->frame_buffer), config.client[QUBE_DOM0].background,
                             0, w->y + w->height, r->width, r->height - (w->y + w->height));
         /* left area */
-        draw_util_rectangle(&(con->frame_buffer), config.client.background,
+        draw_util_rectangle(&(con->frame_buffer), config.client[QUBE_DOM0].background,
                             0, 0, w->x, r->height);
         /* right area */
-        draw_util_rectangle(&(con->frame_buffer), config.client.background,
+        draw_util_rectangle(&(con->frame_buffer), config.client[QUBE_DOM0].background,
                             w->x + w->width, 0, r->width - (w->x + w->width), r->height);
     }
 
@@ -629,8 +640,6 @@ void x_draw_decoration(Con *con) {
     /* 6: draw the icon and title */
     int text_offset_y = (con->deco_rect.height - config.font.height) / 2;
 
-    struct Window *win = con->window;
-
     const int deco_width = (int)con->deco_rect.width;
     const int title_padding = logical_px(2);
 
@@ -672,6 +681,7 @@ void x_draw_decoration(Con *con) {
     }
 
     i3String *title = NULL;
+
     if (win == NULL) {
         if (con->title_format == NULL) {
             char *_title;
@@ -691,6 +701,18 @@ void x_draw_decoration(Con *con) {
         goto copy_pixmaps;
     }
 
+    /* Set Qubes window title only when the container has a title and contains
+     * a window. */
+    if (win != NULL) {
+        char *title_buf;
+        sasprintf(&title_buf, "[%s] %s", i3string_as_utf8(win->qubes_vmname), i3string_as_utf8(title));
+        if (con->title_format != NULL)
+            I3STRING_FREE(title);
+        title = i3string_from_utf8(title_buf);
+        FREE(title_buf);
+    }
+
+
     /* icon_padding is applied horizontally only, the icon will always use all
      * available vertical space. */
     int icon_size = max(0, con->deco_rect.height - logical_px(2));
@@ -751,9 +773,7 @@ void x_draw_decoration(Con *con) {
             icon_size);
     }
 
-    if (win == NULL || con->title_format != NULL) {
-        I3STRING_FREE(title);
-    }
+    I3STRING_FREE(title);
 
     x_draw_decoration_after_title(con, p, dest_surface);
 copy_pixmaps:
